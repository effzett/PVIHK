name: Build PVIHK (plattformselektiv)

on:
  workflow_dispatch:
    inputs:
      target:
        description: 'Welche Plattform soll gebaut werden?'
        required: true
        default: 'windows'
        type: choice
        options:
          - windows
          - macos
          - both

jobs:
  init:
    name: Generiere Buildnummer und Version
    runs-on: ubuntu-latest
    outputs:
      build_number: ${{ steps.get_number.outputs.build_number }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Lese build_number.txt
        id: get_number
        run: echo "build_number=$(cat build_number.txt)" >> $GITHUB_OUTPUT

      - name: Lese Version aus build.py
        id: get_version
        run: |
          echo "version=$(PYTHONPATH=. python3 -c 'from build import get_version; print(get_version())')" >> $GITHUB_OUTPUT

      - name: Brich ab, wenn Plattform f√ºr Release-Tag schon ver√∂ffentlicht wurde
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          tag="v${{ steps.get_version.outputs.version }}"
          target="${{ github.event.inputs.target }}"

          echo "üîç √úberpr√ºfe Release-Tag: $tag f√ºr Zielplattform: $target"

          if ! gh release view "$tag" > /dev/null 2>&1; then
            echo "‚úÖ Release $tag existiert noch nicht ‚Äì alles ok."
            exit 0
          fi

          echo "‚ÑπÔ∏è Release $tag existiert bereits."

          if [[ "$target" == "windows" || "$target" == "both" ]]; then
            if gh release view "$tag" | grep -q 'pvihk.exe'; then
              echo "‚ùå Windows-Dateien wurden bereits ver√∂ffentlicht."
              exit 1
            fi
          fi

          if [[ "$target" == "macos" || "$target" == "both" ]]; then
            if gh release view "$tag" | grep -q '.dmg'; then
              echo "‚ùå macOS-Dateien wurden bereits ver√∂ffentlicht."
              exit 1
            fi
          fi

          echo "‚úÖ Gew√§hlte Plattform wurde noch nicht ver√∂ffentlicht ‚Äì weiter geht's."



  build-windows:
    name: Windows-Build
    runs-on: windows-latest
    needs: init
    if: ${{ github.event.inputs.target == 'windows' || github.event.inputs.target == 'both' }}
    env:
      BUILD_NUMBER: ${{ needs.init.outputs.build_number }}
      VERSION: ${{ needs.init.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          environment-file: environment-windows.yml
          activate-environment: pvihk
          auto-update-conda: true
          channels: conda-forge,defaults

      - name: Install pip-only packages
        run: |
          pip install pyinstaller fpdf==1.7.2

      - name: Find pulp path
        id: find_pulp
        shell: bash -l {0}
        run: |
          PULP_PATH=$(python -c "import pulp, os; print(os.path.dirname(pulp.__file__))")
          echo "pulp-path=$PULP_PATH" >> $GITHUB_OUTPUT

      - name: Read build number
        id: read_build
        shell: bash
        run: |
          echo "BUILD_NUMBER=$(cat build_number.txt)" >> $GITHUB_ENV

      - name: Build with PyInstaller
        shell: bash -l {0}
        run: |
          pyinstaller \
            --clean \
            --noconfirm \
            --onefile \
            --windowed \
            --log-level=DEBUG \
            --icon=assets/PVIHK.ico \
            --hidden-import=pulp \
            --add-data "${{ steps.find_pulp.outputs.pulp-path }};pulp" \
            --add-data "build_number.txt;." \
            --add-binary "assets/cbc.exe;." \
            --collect-submodules PySide6 \
            --collect-data PySide6 \
            --distpath dist \
            pvihk.py

      - name: Debug LICENSE exist
        run: dir assets\LICENSE.txt

      - name: Ensure dist directory exists
        shell: pwsh
        run: |
          if (-not (Test-Path "dist")) {
            New-Item -ItemType Directory -Path "dist"
          }

      - name: Run NSIS
        run: makensis /DVERSION=${{ needs.init.outputs.version }} installer/pvihk_installer.nsi

      - name: Check if EXEs were built
        shell: pwsh
        run: |
          $version = $env:VERSION
          $setupPath = "dist/PVIHK-$version`_setup.exe"
          if (!(Test-Path "dist/pvihk.exe")) {
            throw "pvihk.exe not found"
          }
          if (!(Test-Path $setupPath)) {
            throw "$setupPath not found"
          }
      - name: Artefakte hochladen (Windows)
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifacts
          path: |
            dist/pvihk.exe
            dist/PVIHK-${{ env.VERSION }}_setup.exe
            release/README_windows.txt


  build-macos:
    name: macOS-Build
    runs-on: macos-latest
    needs: init
    if: ${{ github.event.inputs.target == 'macos' || github.event.inputs.target == 'both' }}
    env:
      BUILD_NUMBER: ${{ needs.init.outputs.build_number }}
      VERSION: ${{ needs.init.outputs.version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          environment-file: environment.yml
          activate-environment: pvihk
          auto-update-conda: true
          channels: conda-forge,defaults

      - name: Install pip-only packages
        run: |
          pip install fpdf==1.7.2 pyinstaller

      - name: Read build number
        id: read_build
        shell: bash
        run: echo "BUILD_NUMBER=$(cat build_number.txt)" >> $GITHUB_ENV

      - name: Build macOS app with PyInstaller
        shell: bash -l {0}
        run: |
          pyinstaller \
            --clean \
            --noconfirm \
            --onefile \
            --windowed \
            --icon=assets/PVIHK.icns \
            --hidden-import=pulp \
            --add-data "$(python -c 'import pulp, os; print(os.path.dirname(pulp.__file__))'):pulp" \
            --add-data "build_number.txt:." \
            pvihk.py

      - name: Prepare content for DMG
        run: |
          rm -rf dmg_content && mkdir dmg_content
          cp -R dist/pvihk.app dmg_content/
          ln -s /Applications dmg_content/Applications

      - name: Install create-dmg
        run: brew install create-dmg

      - name: Cleanup dmg_content
        run: |
          rm -f dmg_content/*.icns
          rm -f dmg_content/.DS_Store

      - name: Create DMG without background
        run: |
          create-dmg \
            --volname "PVIHK" \
            --volicon "assets/disc.icns" \
            --window-pos 200 120 \
            --window-size 500 300 \
            --icon-size 100 \
            --icon "pvihk.app" 125 150 \
            --icon "Applications" 375 150 \
            "PVIHK-${{ env.VERSION }}.dmg" \
            dmg_content/

      - name: Artefakte hochladen (macOS)
        uses: actions/upload-artifact@v4
        with:
          name: macos-artifacts
          path: |
            PVIHK-${{ env.VERSION }}.dmg
            release/README_mac.txt

release:
  name: Release-Erstellung (zentral)
  runs-on: ubuntu-latest
  needs: [init, build-windows, build-macos]
  if: ${{ always() }}
  env:
    VERSION: ${{ needs.init.outputs.version }}
    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Lade Release-Dateien herunter (aus anderen Jobs)
      uses: actions/download-artifact@v4
      with:
        path: dist

    - name: Entpacke Artefakte aus Unterordnern
      run: |
        mv dist/windows-artifacts/* dist/ 2>/dev/null || true
        mv dist/macos-artifacts/* dist/ 2>/dev/null || true

    - name: Zeige Inhalt von dist
      run: ls -R dist

    - name: Zeige vorhandene Release-Assets (optional)
      run: |
        echo "üîé Pr√ºfe, ob Release v${{ env.VERSION }} bereits existiert:"
        gh release view "v${{ env.VERSION }}" --json assets -q '.assets[].name' || echo "‚ÑπÔ∏è Noch kein Release vorhanden ‚Äì vermutlich erster Lauf."

    - name: Abbruch, wenn Assets mit gleicher Version bereits vorhanden sind
      run: |
        echo "üîç √úberpr√ºfe, ob Plattform-Dateien bereits hochgeladen wurden..."
        assets=$(gh release view "v${{ env.VERSION }}" --json assets -q '.assets[].name' 2>/dev/null || echo "")

        found=false

        if [[ "${{ github.event.inputs.target }}" == "windows" || "${{ github.event.inputs.target }}" == "both" ]]; then
          if echo "$assets" | grep -q "pvihk.exe"; then
            echo "‚ùå Windows-Datei 'pvihk.exe' ist bereits im Release."
            found=true
          fi
          if echo "$assets" | grep -q "PVIHK-${{ env.VERSION }}_setup.exe"; then
            echo "‚ùå Windows-Installer ist bereits im Release."
            found=true
          fi
        fi

        if [[ "${{ github.event.inputs.target }}" == "macos" || "${{ github.event.inputs.target }}" == "both" ]]; then
          if echo "$assets" | grep -q "PVIHK-${{ env.VERSION }}.dmg"; then
            echo "‚ùå macOS-Datei ist bereits im Release."
            found=true
          fi
        fi

        if [ "$found" = true ]; then
          echo "üö´ Abbruch: Diese Plattform-Dateien wurden bereits ver√∂ffentlicht. Bitte Versionsnummer erh√∂hen oder Zielplattform wechseln."
          exit 1
        else
          echo "‚úÖ Keine Konflikte ‚Äì Upload wird fortgesetzt."
        fi

    - name: Erzeuge oder aktualisiere Release mit vorhandenen Dateien
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ env.VERSION }}
        name: Release v${{ env.VERSION }}
        body: |
          Automatisch generierter Release f√ºr Version ${{ env.VERSION }}.
          Enth√§lt nur die verf√ºgbaren Plattform-Dateien.
        files: |
          dist/pvihk.exe
          dist/PVIHK-${{ env.VERSION }}_setup.exe
          dist/PVIHK-${{ env.VERSION }}.dmg
          dist/README_windows.txt
          dist/README_mac.txt

